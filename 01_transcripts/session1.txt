"The state of the practice in collaborative MDSE"

MODERATOR: The focus group is focusing on the state of practice of collaborative MDSE. 
Our purpose here is to characterize certain issues in collaborative modelling and these issues are practices and needs of collaborative MDSE from practitioner’s viewpoint. We are really interested in your experiences as practitioner on three topics, on collaborative MDSE, and the aim is to explore the gap between what we think and what we know AND what you know and what you think so that we can understand what are the needs and what you do and why you do stuff and how you do stuff so this is really an important piece of information that we can bring to academia so that academia can reflect on these needs. 
Here are the topics and for each of topic we will show the hypothesis, we will ask you to reflect on the hypothesis guided by three questions. 

These are three main topics. Our hypothesis says that collaborative modelling can be broken down into three dimensions or topics or areas, whatever you call it.
Our first topic will be model management and by model management you want to look at supported artifacts, supported modelling languages, how certain tools and techniques deal with models, how they manage a life cycle. 
Within this topic we suggest that there are these seven dimensions: artifact, aim, ….. and to further explore this hierarchy we suggest that there is another level, this is the last level. When we say artifacts in model management, this can be either very abstract models or artifacts can be more closer to the code. We also suggest that when you talk about the aim of model management you can look at visualization. So you want to visualize your models or you want to edit them and in editing you want to use one or multiple notations. Our hypothesis also suggests that when you go to notations, for example, to edit your models you want to use visual, textual, tabular and mixed notations. Speaking of linking between models, we can think of static and generative links. By static links, we mean there are links essentially present in the model, between the models, you can reference one model element from the other. By generative, we mean those links are necessarily there in a persistent way or exclusive way but they are more generative. 
Speaking of platforms of model management, we can think of desktop client, web-based client and sort of in between mixed client. 
When it comes to integration, because you want to use MDE in a larger context you might want to think in terms of using model driven techniques for code generation - so this model to code, for reverse engineering - from code  to model maybe. I want to execute some sort of low code round trip engineering so I go from model to code and back to model and close the loop. 
It is also possible to establish linking between models, views, code and their applications so that maybe use case for you. And of course a very important part is that you also want to embed your model driven techniques into CI/CD processes. 
Speaking of interoperability, obviously you cannot get away with integrating tools in your processes. This is our hypothesis. This is what our theory suggests and now we can spend some time to investigate certain of this hypothesis. 

Here are three questions: 
First of all, is what we discussed here in line with your experience? Or do you find anything missing? Did you find anything shocking? Something new? Please take it away. 

PARTICIPANT-2: Before the meeting, I tried to come up with a structure which partly looks similar to yours and partly has some additional things. Not sure how it fits but I just will try to go parallel looking at your categorization and then try to map it to what I have written. 
So first thing I think is missing is that sometimes a bit of a kind of an aspect which is a little bit blurry: What does it mean in particular, where the collaboration happens between what, who whom? So for instance, it could be an intra-model collaboration where two developers are collaborating on the same model, or manipulating same elements. 
Then there is something like intra-department modelling collaboration which may means that they are working on same kind of models but usually do not run into a much conflict or something like that because they are may be working on different kind of products but nevertheless the same department and working with same kind of models. 
Again I think you cannot make a hard decision between both things. Maybe there are also some cases in between and then there are the inter-department modelling collaborations which, to my experience, are the most hard ones because they have a lot to do with politics and resources and social things where developers or stakeholders across the departments have to collaborate doing their models and many times we are speaking about different kind of models, different types of models, different kinds of sources, data sources, data sinks where they are stored and each area I think has its own demand, so in its own aspects. 
Bringing to the next thing, various sources were sometimes working with the same model I mentioned already, same data sources and different data sources. 
If you have a kind of a central storage for all your data you have a central meta model maybe for everything then you have your views. This is one extreme aspect maybe and then you have very heterogeneous distribution of different kind of models in different data sources. Nevertheless, they belong together. I think this is very essential thing. 
What you have is these links, so you have this static and generative links between models.
Distinguish here also a bit working with views so, for instance, if you have a kind of common model in the background and then you have the views maybe you can also interpret this somehow as kind of links you have real links as you know it from the internet, you are linking just the real source then you have a kind of a copy where you still are somehow linking but nevertheless you are copying the data and then you have to ensure that once the original one has changed then maybe you are updating your copy every once in a while by importing it again so that it is consistent with the original source and then you have lot of loosely coupled models where it is not clear how real they depend on each other. So, this is also kind of a different kind of a problem, even more aspects than just static and generative linking I think there is more there. 
Then of course there are different kind of representations, data formats. I think have partially using DSLs, using general purpose languages, using databases which also can represent the model. CAD is also a quite important thing in our case which is may be not so specific or not so much discussed in the modelling community but we have this as well, CAD models of devices in our case. I think this is also something additional. We have a lot of discussions that has to do with digitalization level of each model so how formal this content of the model is represented. There are a lot of textual elements which are not formal or you cannot easily process or link against each other. Even if you have model, you have for instance  an application that defines failure tree and guides the user then to find the original source of an error, the root cause of an error but the context of each advise is still limited in its digitalization approach, it can even do a lot of more there. And we have many different kinds of digitalization levels tier and also ensure the consistency between these different kinds of models that have to be consistent but are based on different kind of models that have to be consistent but are based on different levels of visualization causes a lot of troubles. 
And of course finally you mentioned about the tooling, which varies from one department to another and not willing to unify this. We have endless discussion about UML tools in the last years. I think we never acquired a worldwide single one. There are always arguments why not to do so and they are understandable if you have a close look and of course you have a lot of dependencies also of models throughout modeling tools. CAD is maybe something that goes in that direction but maybe even further.

PARTICIPANT-1: I agree with most of the topics. I think PARTICIPANT-2 already mentioned quite a lot. I have written few points especially because of the more interdisciplinary domains so it is not only CAD but also all kinds of schemes that we normally use [22:54?]schemes anything else I would say. One thing that caught my attention was the aim and I was wondering if checking is also an aim of model management. I am not sure about that. 

MODERATOR: So how do you define check? Can you maybe give us an example? 

PARTICIPANT-1: I do not know what check is coming in other parts of course. It could be let us say checking is more or less in the model itself of part of being model management in that sense but I could imagine that you also would like to have some checks in your model management environment and I was also translating checks to have, for example, synchronization or those  kind of things. But that is an open case. I am not sure if it is needed in this picture. 

PARTICIPANT-2:  WHat would be extremely helpful if you could do a kind of measurements regarding consistency of different dependent models so that you can say two independent but related models are consistent to that degree so that you can manage somehow your resources in fixing inconsistencies. Maybe it is enough to have 90% consistency, because the last 10% will cause you too much. But having a way of measuring it ald also see the effects of putting more resources on that topic and measure the effects and again would be extremely helpful but then never saw a really convincing approach for it so far. 

PARTICIPANT-1: Another thing that you can measure of course is also, in the area of model management is certain complexities and not only things that say are completely wrong but also  is the complexity becoming too big to manage it. We also use that now for example for some customers that have too big state models and they cannot see their state modeling anymore. Because they just kept on building and then it is kind of a state model on top of a state model and then suddenly nobody knows what the exact state behavior is anymore. 

MODERATOR: So what do you think, how would you put your finger on the relationship between complexity of models and management of models. This is our topic right now. What do you think the link is? Could you please elaborate on that?

PARTICIPANT-1: In case, let's say, you have a huge number of artifacts. I think you run into some kind of problems with model complexity so this need to be manageable at some point. So, complexity is definitely related to the number of artifacts, for example. And I also think that between what kind of links do you have so if there is a lot of static ones, probably it is more easy than it is more generative. By the way, I do not know if that is also something that they could add to the link between model is, I am not sure if it already exists, but why are not dynamic and conditional links between models? And I do not know if PARTICIPANT-2 also asked the same question but you can discuss that of course. 

PARTICIPANT-2: What is the conditional link?

PARTICIPANT-1: This is based on, let's say, a certain artifact or whatever that is if there is a link between [27:25?} models, for example.  

PARTICIPANT-2:  What we have, for example, is that we at least we have that kind of loosely coupled model that model is still valid if the link is broken but it is indicated in the model that it is, the link is not valid anymore or the link is not quite indicating some inconsistency that you have to do some action. That action could be manual step that you are calling somebody and asking if you have changed your data source in this direction. But I am not sure if that you meant?

PARTICIPANT-1: Well that was my question. And one more thing, for example, is that I see a lot happens in our work. We have our own super model environment, we are very busy with [28:26?] for example and based on very [28:29?] which is also a model then suddenly let's say different models come into play because of that and then there is some link between those models because models are not always, for example, say on their own. There are also dependencies between them and then yeah it could be some kind of conditional situation there because variability is of course a conditional situation. 

MODERATOR: So these are very interesting points you are touching upon. The big picture here is the collaboration. Could you maybe rephrase, rather connect your ideas to how these aspects we just explained here in terms of model management can contribute to an efficient collaboration between parties or how certain ideas will enable collaboration on how certain problems will block an efficient collaboration between parties. So we talked about the levels of digitalization, we talked about inconsistencies we talked about links, What do you think about this?
 
PARTICIPANT-1: I think in general those are the base of collaboration so I would agree with that. Last thing about notation, I saw they are visual. For me notation is more the way to do input. So, I was wondering why, it does not say graphical instead of visual.
 
MODERATOR: Would you be more comfortable with graphical? Do you think there is a difference between 'visual' and 'graphical' or are these sort of interchangeable. 
 
PARTICIPANT-1: So, for me textual is also a visual notation. You could also consider textual in the most essential part also as a graphical notation but for me there is a big difference I think in our scope we are always talking about graphical notation or textual notation but never about visual notation. 
  
MODERATOR: Okay I see your point. That is certainly teminological aspect. 
 
PARTICIPANT-2: One aspect that came into my mind when you ask  heuristic question is so, in ideal case I think regarding this inconsistency topic, an ideal case that you have one model where everybody is contributing to and one format or like UML or using UML model. I many times saw it in the last years I was dealing with this topic in practice because the complexity of model was just too high so there was no way around to split it into several models. And once you split it into several models you have of course the drawback that people moving again in different kind of direction and do not want to be too much dependent on what others are doing and then you have all the socio-political issues again. And you have the problem of keeping all models in sync. But what I have not seen so much is, of course, but what would help, is all these modeling tools also come up with a kind of mechanism to, from my user experience point of view, make these actions that are needed to be in sync, to be consistent of other models as low as possible, as easy as you can think of. So, in one of the projects we are especially focusing on user experience. We are doing a lot of walkthroughs with the users to understand why they decide to do something!. And what we always mentioned, if you have a kind of an [33:04?] kind of already be quite low from theoretical perspective that they have [33:10?] or something even then you can do a lot of things to even lower that barrier so that you have all this what you have a tool with, the update mechanism in your tool. For instance, if the link as I have mentioned before is broken and is quite underlying maybe the guy does not know who to contact? where to ask why that change has happened? Why not having all the possibility to interconnect all these modeling tools in a way that there is just this right click and it is opening directly a chat window to the right person who is responsible for the change and that can just change the experience. Maybe it is not the very rocket science topic from the modeling perspective but would be very helpful to know all these barriers that people still try to get in contact avoiding inconsistency without having a huge consistency management tool in the background which can achieve that to some degree but in a perfect way. I do not think this is likely to happen quite soon. So all these things that help here could be ideas for existing frameworks for additional extensions. 
 
MODERATOR: These are very good points. Now we will jump to another topic, the topic we call communication. @Participant-3, what would be the most interesting point for you form these in terms of model management which either allows collaboration between parties or block collaboration between parties. What is your take on this?
 
PARTICIPANT-3: I am very new to this. It would help if there is any definition of the model management with the mindmap. what is model management and what is not or what is just modeling. For example, notation for me is just bare defined by the modeling language so that's just probably accurate classification of notations but I do not see the obvious relationship to model management itself. If we talked about artifacts, then in my experience besides model and [36:13?] to what I have seen customers are usually using some sort of documentation or some reports that are extracted from models but still close to them but not models themselves. And then if model managenement I think what customers, I think they have some quite narrow viewing to this, but in most of my experience there is a company or an entity, they are doing some production. Usually some material object that they produce some devices, for example, they need software product and to produce their software where they use model driven engineering with usually just one language. That is what I have seen in industy. So, back to model management important aspect for them will be the change management. So, when managing their models ideally they need to understand what changes were done when and why and so on. Usually it is achieved by just using some source code management solution on the model pile basically so models end up as files. But this also puts the tools that they are using in this process in a very important position because there has to be some integration between them that will allow this technique or if we are talking about blockers you want some practical example such as models are used as textual files in some source code management system then the merge will not be possible. As soon as there is a conflict it will be an enormous waste of effort as people would be deciding not to merge anything and starting to redoing things from scratch. So that part and yeah tool support in modeling is very important. So artifacts we touched about visualization and editing I guess I have a bit [39:17?] opinion in my head when I am trying to see that's really the game of model management. For visualization, we need to maybe define precisely visualization of what? Because what I have seen and I think I have only used visualizing modeling languages. The model is a visualization and abstraction from something. So, if you are doing modeling you are doing visualization. 
And again editing that I guess boils down to the choice of language and the tooling. If the language and the tooling have multiple notation, then yes but what I have seen is usually kind of one is enough. From the theoretical point of view, we can think that if there are multiple notations it will be most convenient but I have not really seen this happening but we can also think about why. 

About link, I would say link between models well what is usually important in the project at least I have observed was the outside links, link with other tools. And there connection of the models to other project lifecycle artifacts like in the first place requirements. That's really important because that is what stakeholders will be looking into most probably at some point and then again there should be a good tooling otherwise it will be painful. 

MODERATOR-3: I am still thinking about something that PARTICIPANT-2 said in the beginning about collaboration at different levels so sharing the models at different levels, within the same mode different units and so forth. I was wondering if to facilitate we need to make explicit the aim of somehow sharing this knowledge here and then we need some I don't know some classification of the models and source. So if different units of departments of same organization have to understand which models they have to work on, how do they do that. 

PARTICIPANT-2: That's not an easy question. So, it cannot be answered in a generic way. To my experience, but this is a special case to some degree also for AVL but maybe it is very similar so could assume same for other large companies. As long as you are talking about different departments, it does not make much sense to really convince the people to work on the same kind of models but this is something which never really funtioned in the past. There are so many interested [speak?] against each other. Also, recently there was one request for a good reason of a department who would like to have some extensions in the models of another department because they would have much more value of the overall models and there was endless discussions and finally it was refused because it was leading to the question that who will be paying us for this extension for the required resources. So you are not doing that of course. And so that just did not happen. So there are a lot of things that come here into play that do not necessarily has to do something with technical issues and you need to take this into consideration. But it can also be for good technical reasons that you want to split models into several ones and then you have to enter the collaboration because it is just leading to less complexity in the models you avoid maybe. Different people are extending models at different levels where they do not see the overall picture anymore because everyone is everywhere. And you also want to avoid this so it definitely makes sense also from this perspective to manage them all if they are growing. Another aspect will be model evolution, for instance, if depending on your requirements, depending on your aims for modeling someone evolving their models faster than others and again if you have to 
have a single model you will have a lot of troubles of having consistent view, when you change a meta model when you migrate your existing model base on another one, it is much better you have splitted them but of course everytime you split a model you have to ensure that tehy are still consistent that you are still collaborating in an efficient way. Its always a tradeoff but, sorry I do not have an easy easy answer for this. {46:02}

MODERATOR: So here you mentioned, by splitting up the models you can arrive to less complex models or less complex overall result in complexity. 

PARTICIPANT-2: Overall complexity, I wouldn't say! because you have to have a tradeoff. Overall complexity can also be introduced by doing all this consistency again. Managing a consistency is again a complexity but it lowers the complexity of each model maybe if you do it wise. You can do this all wrong, so if you make a wrong decision and split it in the wrong parts then maybe you do not lower the complexity for whatever reason. You have to be very careful in doing that but it always has a tradeoff. And to my experience, this is always very [47:04] again sometimes it develops in wrong direction then you have to live with that because going back to right direction would just mean that you have then again a lot of update mechanisms needed to [47:18?] for existing modeling base. Nobody will pay for that because somehow it works and when the threshold for paying is really reached and you are doing it again so yes no easy answer. 

MODERATOR: So this actually brings back to what PARTICIPANT-1 mentioned. He was also mentioning complexity and he would measure complexity in terms of the number of artifacts. What do you think the number of artifacts or the number of sub-models you split your model into, What do you think how this phenomenon will impact collaboration. Would it help to establish collaborative, and if I split up the model into smaller pieces and then I have to deal with the completely of keeping those model in sync, or is it the number artifacts or number of different notations. So what are the essential elements of complexity you think that prevent collaborative modeling or enable collaborative modeling?

PARTICIPANT-2: Also some experience in the past, when I was speaking of modeling, especially for development software then you always have to fight regarding model based technique people which are usually low in number and huge base of ordinary developers. And most of the times you have to convince the traditional developers to introduce some kind of abstraction to get a little bit high from using models. And it was extremely difficult to convince the people if you have models with a lot of artifacts because I always received the question what is the benefit? People, to my experience, tend to see a much more confidence for whatever reasons doing code and managing the artifacts in code. It is easier for me than doing on the modeling level. 
Never fully understood it but but it was mostly the case that the people are not convinced of switching. However, if you put that into small pieces and make that very understandable that what the model is about and that this is just a high view than they still can do a lot with coding, for instance. I always have this approach that you make your model of course as useful and as simple as possible, and about code generation also keep the code geenrator as simple as possible, and still doing a lot of coding in a traditional way but making that kind of a template based approach where you have code snippets which are configured by the models only and keep the code generator simple because filling the holes which are not defined in your code which obviously leads to very simple models. The contract would be that you have very simple models where everything can be generated on the code level where you do not have to put any knowledge, the whole intelligence is put in the code generator and in the model itself. 

MODERATOR: Our next topic will be collaboration with in collaborative modeling, the ways and the means of collaborating. Here the suggestion and hypothesis is that collaboration breaks down to four aspects: the type can be synchronous or asynchronous so either you go offline or you go real time. So you can do the stuff while other party is also doing stuff on your model. Other aspect of collaboration is role-based access control. So who and how they can access certain elements of the model. The third aspect is conflict resolution. If a conflict arise, how will you manage it: manually or in an automated way. And the fourth aspect is model versioning which is a means of sharing collaboration and here we suggest that there are aspects regarding some differences in merging, visualizing the differences and using things like git, for example, for putting things in motion regarding your versioning. 
So what do you think about this hypothesis here? Is this in line with what you experienced and if not, is there something missing or is there something new to you? 

PARTICIPANT-3: I am thinking if I have seen any real life scenario involving synchronous collaboration because of course it is an appealing concept. I think someone in the meeting mentioned google docs, if modeling tools would be that easy it would have been fantastic. But I am not sure for at least UML, I do not think that exists for UML. 

PARTICIPANT-1: I would say this looks like quite complete in itself. I agree with PARTICIPANT-3 taht at this moment we mostly have asynchronous type. But definitely because of COVID-19 we see that synchronous possibilities are growing and also becoming essential so that will be an interesting topic to discuss. I do not see anything missing from my perspective. 

PARTICIPANT-2: I also agree on my side so yes synchronous would be a cool feature but I do not see it mandatory for current point of view but maybe if it helps in doing kind of, what I mentioned before when you want to load [55:56?] and you have some troubles with solving a conflict because somebody else changed some model somewhere, then you want to get in contact with this and then maybe you want to solve this issue together and maybe then this comes into play but generally asynchronous is usually sufficient. 
Role-based access control, I think, is extremely important from my point of view because it has a lot to do with social issues. So people want a control about the parts of the model they are responsible to. We internally are speaking about kind of onion model alongside our department path that we always have an inner layer which is writeable by a dedicated set of users and this inner layer is provided read-only to the next outer layer which is consuming this information, extending it [56:59?] has write access to its own layer and then the next layer is always again has a kind of read access only to the second inner layer and so on and so forth. And having here very strict role-based access control avoids a lot of conflicts between the people so I think this is quite important. 
And automated conflict resolution depends on if the result is always trustable, otherwise people may get scared about it and they rather want to have manual look on it. And diff/merge is of course important, git integration is important because people know it and want to have it somewhere in the background. They do not want to reinvent the wheel and diff visualization we will have definitely work on it together with Eclipse source, it has some nice benefits. It is not absolutely mandatory but its worth an effort to do something there. 

MODERATOR: You mentioned a very interesting keyword 'Trust', when it comes to automated conflict resolution. How will you define trust and do you think the notion of trust translates to practical scenarios. Do you have metrics in place for that? or do you have best practices in place for that? Or is it something you would like to have?

PARTICIPANT-2: Not easy to answer. I think a very simple definition would be if people get stucked in their work because something has been done wrongly by automated system they would immediately stop using that system. 

MODERATOR: Are you talking about more of a trust in the system? not in the source where the model originates from. 

PARTICIPANT-2: Both! So for example we had really good ideas regarding using one inner layer of onion model to generate some input for device simulator which definitely would make sense. 
However, only minor things regarding inconsistencies already caused the colleague to immediately stop using it and relying on people instead. And if all the automatism you have  incorporated they have to go through a certain threshold and that threshold I think depends on the usecase and you have to find that out of course. Sometimes it is fine if you have 90%, sometimes 100%, sometimes it is fine if just an indicaor is given in that direction then you may have a success rate of 60% and that is also sufficient. So it depends! But in general if something is automated you first have to convince the people. That is always difficult. 

PARTICIPANT-1: I have a question. In terms of collaboration, on different ways of course I think we are discussing here collaboration let's say on making models but of course you also have collaboration on let's say maintaining models, maintaining meta-models. Is that outside the scope of this discussion?

MODERATOR: Let me turn the question around. So, what do you think? When you talk about collaboration, do you include both of these elements in it?

PARTICIPANT-1: Well, eventually we will have because if we are having, let's say, more to model driven engineering and then finally of course your activity of maintaining model will also 
be more important. 

MODERATOR: And do you think that there are differences in terms of techniques and approaches for these two? 

PARTICIPANT-1: No, that's why I ask. I think these things may also be very useful for, let's say, maintaining meta-models for example. I think we run into similar problems there. 

MODERATOR: So, you are saying its creation and maintenance are the two distinct pillars of collaboration.         

PARTICIPANT-1: Well one is let's say, of course [1:02:02 using?] and developing models and then the next step is out of models generattion and all the other stuff but the first step in using models will be creating those models. So I did not know if you consider that also as part of scope here? I think it is important. 

PARTICIPANT-2: If it is about model evolution, then it is definitely important especially in case you have splitted models and you are doing your model evolution you are maybe looking into your local interests when you are doing model evolution but without knowing it you have a big effect on other consumers which cannot control your way of model evolution. And then again you run into some troubles and there is for sure a kind of collaboration required on this meta model level as well. 

MODERATOR: So, lastly our hypothesis is communication. We have briefly touched upon this topic. I recall Participant-2 mentioning chats and different means of communication between stakeholders. 
Here are the two dimensions to this topic. Who are the stakeholders and how heterogeneous the set of stakeholders is? So, you have only software engineers or you also have mechanical engineers, for example, or the business people. The second dimension to classify communication is means for communication. And we assume that there are two ways to do this, to communicate between the stakeholders. It is by differencing the models so you can infer what the difference between the views of two stakeholders and by propagating the changes automatically. 
So this is how you communicate your intent to the other party. Looking at this picture do you think anything is missing at any level here? We have touched upon chat as a means, what do you think how that will fit this model. 

PARTICIPANT-2: Chat is what I would insist upon as just one possibility to implement but I think people would still need some way of communicating also informally so, for example, automatic change propagation again has this same flavor as I mentioned before: if it is automated so it has to be trusted. Model differencing for sure helps to get a way of communicating without the actual need of really speaking to each other. But I think there should also be a third channel where people can talk to each other but I think this is the lack which I currently experience and not via using just mail or telephone so you would need something incorporated, an aspect of a social tool incorporated into your modeling tool would be nice to have and leads you directly very straightforward to the right people that you would need for your question without changing the tool, without asking anybody whom to contact, immediately will find the right people you have to talk to. And yes about stakeholders heterogenity, we are definitely very heterogeneous in our case, but that depends on the scale of the company, on usecase. But in our case we are definitely heterogeneous. 

PARTICIPANT-1: I do not have much experience with this. I think our stakeholders are also more heterogeneous. By the means of model difference I would say if you want to discuss, let's say, those differences then probably you talk different language because you also talk in different models. I think it is very good to align more in a synchronous way than in asynchronous way.
So I definitely agree that, for example, email is not the best way to communicate because there is a time gap in between. So to understand each other's context it is essential to make this synchronous. So when I talk, then the other party already knows what I am trying to explain and then we both have a look at different models and same behavior that we try to achieve. 

MODERATOR: Do you think the heterogenity of stakeholders makes a difference between how effective they can communicate in a collaborative setting?

PARTICIPANT-1: Definitely yes. 

MODERATOR: Can you think of an example where this was not an issue in your case? 

PARTICIPANT-1: I would say it is always an issue. 

MODERATOR: Why is that an issue? Is this because they use different models? or different techniques to communicate?

PARTICIPANT-1: They have different disciplines. So, for example, what we software people think is quite logical but maybe for some other people, let's say mechanical engineers, it maybe quite non sense. 

MODERATOR: Is it because they think in different concepts? For example, physicists, and we think in real systems or is it because they use different terms. 

PARTICIPANT-1: Yeah of course if you use different concepts then you also probably use different terms so that is a factor there. But then again it is also the level of instruction that is very relevant here. I think electrical engineers are very used to in talking in details and in software world we already know to come to a higher abstraction, even our programming language have different abstraction levels so I think there is a big difference. 

PARTICIPANT-3: From what I have seen, communication is mostly homogenous in most cases, and the use cases would be if someone just try to understand or make a change to some model. If they lack something in understanding then of course an instant communication, something like, chat or a physical talk which is not possible these days but would be most usable. And another popular communication path would be some formal reviews of the changes done to the model. So, normally customers during model driven development would have a process of their own peer review of the changes and then that's usually something offline probably using some existing tooling for source code reviews like, [1:11:22?] wiki-based thing. 


MODERATOR: Thank you.